*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
body{
    display: flex;
    justify-content: center;
    align-items: center;
}
.container{
    display: grid;
    padding: 5px;
    background-color: rgba(255, 255, 255, 0.469);
    border: 1px solid;
    border-radius: 10px;
    /* -------------------------------------------------------------------- */
    /* grid-tempalete-columns es la propiedad de grid */
    /* que no ayuda definir cuantas columnas tendra una caja */
    /* podemos definir las columnas con pixeles una por una */
    /* o podemos usar la funcion repeat(2,100px) para definir que */
    /* columnas de un valor especifico,si queremos que cada columna ocupe */
    /* un espacio diferente repeat no nos sirve */
    /* otra funcion muy usada es minmax(min, max) que nos permite darle un valor*/
    /* minimo de columna o de fila a las cajas o a un grupo de estas */
    /*--------------------------------------------------------------------*/
    /* grid-template-columns: minmax(100px,3fr) repeat(2,2fr) 1fr ; */
    /*--------------------------------------------------------------------*/
    /* el valor fr o fracion es una valor especial que solo sirve con grid */
    /* que nos ayuda a asignar el tamaño de columnas y filas proporcional al tamaño */
    /* del contenedor es dicir el tamaño de el contenedor se dividira */
    /* entre la cantidad de filas y ese sera el tamaño de una fracion o 1fr */
    /*--------------------------------------------------------------------*/
    /* gap funciona igual que en flex y nos yuda a dar separacion entre lienas y columnas */
    /* a las cajas */
    gap: 1vw 1vh;
    /*--------------------------------------------------------------------*/
    /* grid-template-rows nos ayuda a dar un tamaño explicito a las filas en grid */
    /* en grid se pueden crear filas explicitas e implicitas grid-tempñate-rows */
    /* nos ayuda a crearlas y darles un tamaño explicitamente */
    /* grid-template-rows: repeat(2,1fr); */
    /*--------------------------------------------------------------------*/
    /* si queremos indicar que la filas que se creen implicitamente tenga una tamaño */
    /* usaremos la propiedad grid-auto-rows */
    /* grid-auto-rows: 2fr 1fr 4fr; */
    /*--------------------------------------------------------------------*/

}
.container{
    width: 90vw;
    min-width: 45vw;
    height: 100vh;
    /* en grid hay dos propiedades que nos permiten hacer nuestros layouts responsive */
    /* esto son auto-fit y auto-fill */

    /* auto-fill rellena el espacio de la cuadricula */
    /* auto-fill = autocompletar :  la propiedad de autocompletar llena las filas con tantas columnas 
    como sea posible. La columna recién agregada puede estar vacía pero aún ocupará un espacio en la fila dada. 
    Es una propiedad importante en la cuadrícula CSS que crea un diseño receptivo sin escribir una consulta
    de medios para cada cuadrícula. */
    /* la manera de usar auto-fill o auto-fit es conjunto a repeat y minmax de la siguiente manera: */
    grid-template-columns: repeat(auto-fill,minmax(100px,1fr));
    /* lo que declaramos en esta linea es que las cajas se irana ajustando y que la maxima 
    maxima cantidad de espacio que tendran sera una fracion y la minima necesaria es 100px
    por lo que auto-fill no creara una columna hasta que aya minimo 100px que pueda usar de
    espacios*/

    /* auto-fit ajusta el contenido o las cajas al espacio */
    /* auto-fit =Ajuste automático: el ajuste automático se comporta igual que el relleno automático, pero la propiedad de ajuste automático llena el espacio disponible actualmente al expandir su tamaño para ocupar el espacio disponible según el ancho del dispositivo. Si todos los elementos de la cuadrícula están vacíos, se trata como una sola pista de tamaño 0px.
    Con el fin de encontrar el número de pistas repetidas automáticamente, debemos mantener el tamaño
    de la pista en un valor específico (por ejemplo, 1 px), para evitar la división por cero.*/
    /* grid-template-columns: repeat(auto-fit,minmax(100px,1fr)); */
}

.container section{
    width: auto;
    height: auto;
    background-color: deeppink;
    color: white;
    grid-column: span 2;
}
.container section:first-child{
    height: auto;
    background-color: deepskyblue;
    /* con las propiedades grid-column-start y grid-column-end
       podemos posicionar cada caja en donde desemos indicando
       el inicio del la caja que sera grid-column-start y el
       final con grid-column-end estas propiedades acomodan
       las cajas en los eje y es decir indicamos el eje y de inicio
       y el eje de final
       con el valor span dejaremos de indicar el inicio o fin de 
       columnas y filas y indicaremos la cantidad de columns que
       usara grid-column-start: span 2; 
    */
    /* grid-column-start: span 2; */
    /* 
       con grid-row-start y grid-row-end hacemos lo mismo en el eje
       x poscionamos la caja en un eje x de inicio y otro de final
    */
    /* grid-row-start: span 3; */
    /* como es normal en css hay propiedades que nos ayudan a acortar */
    /* la escritura en este caso grid-row y grid-column  a las que les
       podemos dar una valor de inicio y uno de final con la sintaxis:display:
       fila_de_inicio / fila_final
       tambien podemos usar el valor span
    */
    grid-row: span 3;
}
/* en grid podemos superponer un elemento a otro de manera muy sencilla
   esta manera es usando grid-column y grid-row o grid-column-start y end
   edemas de grid-row-start y end par aesto neceistaremos colocar para hacerlo
   colocaremos los mismos valore de inicio y fin en filas y columnas de las dos cajas
   
*/
.container section:nth-child(5){
    background-color: rgb(255, 20, 145);
    grid-column: 5/7;
    grid-row: 2;

}
.container section:nth-child(7){
    opacity: 0;
    grid-column: 5/7;
    grid-row: 2;

}
section:nth-child(7):hover{
    opacity: 1;
    background-color: rgba(149, 20, 255, 0.4);
}